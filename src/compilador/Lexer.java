/* The following code was generated by JFlex 1.4.3 on 03/11/12 03:25 PM */

package scanner;
import static scanner.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03/11/12 03:25 PM from the specification file
 * <tt>C:/Users/Tuco/Desktop/Proyecto 1 - Scanner - Compiladores e Interpretes - Sebastian Jimenez - Adrian Sanchez/Scanner/Scanner/src/scanner/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\47\1\65\2\0"+
    "\1\52\1\51\1\66\1\53\1\54\1\6\1\41\1\37\1\42\1\62"+
    "\1\4\12\2\1\61\1\40\1\46\1\43\1\44\1\45\1\0\32\1"+
    "\1\55\1\0\1\56\1\63\1\1\1\0\1\7\1\25\1\24\1\27"+
    "\1\15\1\14\1\32\1\21\1\13\1\1\1\26\1\16\1\30\1\23"+
    "\1\12\1\35\1\1\1\22\1\17\1\11\1\10\1\36\1\20\1\31"+
    "\1\34\1\33\1\57\1\50\1\60\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\17\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\1\1\0"+
    "\1\4\1\0\1\35\1\36\3\2\1\37\21\2\1\40"+
    "\3\2\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\0\1\62\1\0\1\63\1\64\1\0"+
    "\4\2\1\65\1\66\26\2\1\67\1\70\1\4\1\71"+
    "\4\2\1\72\1\73\1\2\1\74\12\2\1\75\2\2"+
    "\1\76\2\2\1\77\1\100\1\2\1\101\2\2\1\102"+
    "\7\2\1\103\1\104\3\2\1\105\1\106\4\2\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\5\2"+
    "\1\117\2\2\1\120\1\2\1\121\1\122\1\123\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\67\0\67"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\67\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0672\0\67\0\u06a9\0\u06e0\0\u0717\0\u074e"+
    "\0\u0785\0\67\0\67\0\u07bc\0\u07f3\0\u082a\0\156\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\156\0\u0c08\0\u0c3f\0\u0c76\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\u0cad\0\67\0\u0ce4\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\u06a9\0\u06a9\0\u06e0"+
    "\0\u06e0\0\u0717\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\156"+
    "\0\156\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\67"+
    "\0\67\0\u0785\0\156\0\u12e8\0\u131f\0\u1356\0\u138d\0\156"+
    "\0\156\0\u13c4\0\156\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\156\0\u1621\0\u1658"+
    "\0\156\0\u168f\0\u16c6\0\156\0\156\0\u16fd\0\156\0\u1734"+
    "\0\u176b\0\156\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\156\0\156\0\u1923\0\u195a\0\u1991\0\156\0\156"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\156\0\156\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\156\0\u1bb7\0\u1bee\0\156\0\u1c25\0\156\0\156"+
    "\0\156\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\3\1\21\1\3\1\22\1\23\1\3\1\24"+
    "\2\3\1\25\3\3\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\70\0\2\3\4\0\30\3"+
    "\32\0\1\4\57\0\1\57\10\0\1\60\1\0\1\61"+
    "\34\0\1\62\66\0\1\63\24\0\2\3\4\0\1\3"+
    "\1\64\26\3\31\0\2\3\4\0\14\3\1\65\13\3"+
    "\31\0\2\3\4\0\25\3\1\66\2\3\31\0\2\3"+
    "\4\0\5\3\1\67\6\3\1\70\13\3\31\0\2\3"+
    "\4\0\3\3\1\71\3\3\1\72\20\3\31\0\2\3"+
    "\4\0\7\3\1\73\4\3\1\74\5\3\1\75\5\3"+
    "\31\0\2\3\4\0\3\3\1\76\24\3\31\0\2\3"+
    "\4\0\2\3\1\77\1\3\1\100\4\3\1\101\1\102"+
    "\15\3\31\0\2\3\4\0\12\3\1\103\15\3\31\0"+
    "\2\3\4\0\6\3\1\104\21\3\31\0\2\3\4\0"+
    "\1\105\2\3\1\106\6\3\1\107\15\3\31\0\2\3"+
    "\4\0\13\3\1\110\14\3\31\0\2\3\4\0\3\3"+
    "\1\111\2\3\1\112\21\3\31\0\2\3\4\0\3\3"+
    "\1\113\24\3\31\0\2\3\4\0\3\3\1\114\24\3"+
    "\32\0\1\4\36\0\1\115\1\0\1\116\25\0\1\4"+
    "\37\0\1\117\1\120\1\121\65\0\1\122\66\0\1\123"+
    "\1\124\65\0\1\125\2\0\1\126\63\0\1\127\66\0"+
    "\1\130\4\0\1\131\61\0\1\132\5\0\1\133\60\0"+
    "\1\134\66\0\1\135\23\0\5\136\1\0\57\136\1\137"+
    "\1\136\5\140\1\0\60\140\1\141\2\0\1\142\64\0"+
    "\5\60\1\0\61\60\6\61\1\143\60\61\1\0\2\3"+
    "\4\0\2\3\1\144\25\3\31\0\2\3\4\0\4\3"+
    "\1\145\3\3\1\146\17\3\31\0\2\3\4\0\26\3"+
    "\1\147\1\3\31\0\2\3\4\0\2\3\1\150\25\3"+
    "\31\0\2\3\4\0\13\3\1\151\14\3\31\0\2\3"+
    "\4\0\3\3\1\152\24\3\31\0\2\3\4\0\10\3"+
    "\1\153\17\3\31\0\2\3\4\0\1\3\1\154\26\3"+
    "\31\0\2\3\4\0\2\3\1\155\25\3\31\0\2\3"+
    "\4\0\14\3\1\156\13\3\31\0\2\3\4\0\1\157"+
    "\12\3\1\160\14\3\31\0\2\3\4\0\23\3\1\161"+
    "\1\162\3\3\31\0\2\3\4\0\4\3\1\163\23\3"+
    "\31\0\2\3\4\0\3\3\1\164\24\3\31\0\2\3"+
    "\4\0\4\3\1\165\23\3\31\0\2\3\4\0\2\3"+
    "\1\166\20\3\1\167\4\3\31\0\2\3\4\0\10\3"+
    "\1\170\17\3\31\0\2\3\4\0\14\3\1\171\13\3"+
    "\31\0\2\3\4\0\1\172\27\3\31\0\2\3\4\0"+
    "\6\3\1\173\21\3\31\0\2\3\4\0\5\3\1\174"+
    "\22\3\31\0\2\3\4\0\2\3\1\175\25\3\31\0"+
    "\2\3\4\0\4\3\1\176\2\3\1\177\20\3\73\0"+
    "\1\200\66\0\1\201\23\0\4\61\1\202\1\61\1\143"+
    "\60\61\1\0\2\3\4\0\3\3\1\203\24\3\31\0"+
    "\2\3\4\0\3\3\1\204\24\3\31\0\2\3\4\0"+
    "\4\3\1\205\23\3\31\0\2\3\4\0\6\3\1\206"+
    "\21\3\31\0\2\3\4\0\1\207\27\3\31\0\2\3"+
    "\4\0\6\3\1\210\21\3\31\0\2\3\4\0\21\3"+
    "\1\211\6\3\31\0\2\3\4\0\6\3\1\212\21\3"+
    "\31\0\2\3\4\0\23\3\1\213\4\3\31\0\2\3"+
    "\4\0\2\3\1\214\25\3\31\0\2\3\4\0\1\3"+
    "\1\215\2\3\1\216\23\3\31\0\2\3\4\0\14\3"+
    "\1\217\13\3\31\0\2\3\4\0\6\3\1\220\21\3"+
    "\31\0\2\3\4\0\2\3\1\221\25\3\31\0\2\3"+
    "\4\0\13\3\1\222\14\3\31\0\2\3\4\0\7\3"+
    "\1\223\20\3\31\0\2\3\4\0\1\3\1\224\26\3"+
    "\31\0\2\3\4\0\4\3\1\225\23\3\31\0\2\3"+
    "\4\0\6\3\1\226\21\3\31\0\2\3\4\0\2\3"+
    "\1\227\5\3\1\230\17\3\31\0\2\3\4\0\13\3"+
    "\1\231\14\3\31\0\2\3\4\0\1\232\27\3\31\0"+
    "\2\3\4\0\1\233\27\3\31\0\2\3\4\0\3\3"+
    "\1\234\24\3\31\0\2\3\4\0\20\3\1\235\7\3"+
    "\31\0\2\3\4\0\1\236\27\3\31\0\2\3\4\0"+
    "\14\3\1\237\13\3\31\0\2\3\4\0\23\3\1\240"+
    "\4\3\31\0\2\3\4\0\20\3\1\241\7\3\31\0"+
    "\2\3\4\0\2\3\1\242\25\3\31\0\2\3\4\0"+
    "\13\3\1\243\14\3\31\0\2\3\4\0\4\3\1\244"+
    "\23\3\31\0\2\3\4\0\15\3\1\245\12\3\31\0"+
    "\2\3\4\0\14\3\1\246\13\3\31\0\2\3\4\0"+
    "\6\3\1\247\21\3\31\0\2\3\4\0\3\3\1\250"+
    "\24\3\31\0\2\3\4\0\15\3\1\251\12\3\31\0"+
    "\2\3\4\0\2\3\1\252\25\3\31\0\2\3\4\0"+
    "\6\3\1\253\21\3\31\0\2\3\4\0\13\3\1\254"+
    "\14\3\31\0\2\3\4\0\10\3\1\255\17\3\31\0"+
    "\2\3\4\0\4\3\1\256\23\3\31\0\2\3\4\0"+
    "\2\3\1\257\25\3\31\0\2\3\4\0\17\3\1\260"+
    "\10\3\31\0\2\3\4\0\1\3\1\261\26\3\31\0"+
    "\2\3\4\0\2\3\1\262\25\3\31\0\2\3\4\0"+
    "\14\3\1\263\13\3\31\0\2\3\4\0\6\3\1\264"+
    "\21\3\31\0\2\3\4\0\14\3\1\265\13\3\31\0"+
    "\2\3\4\0\15\3\1\266\12\3\31\0\2\3\4\0"+
    "\2\3\1\267\25\3\31\0\2\3\4\0\23\3\1\270"+
    "\4\3\31\0\2\3\4\0\20\3\1\271\7\3\31\0"+
    "\2\3\4\0\5\3\1\272\22\3\31\0\2\3\4\0"+
    "\12\3\1\273\15\3\31\0\2\3\4\0\14\3\1\274"+
    "\13\3\31\0\2\3\4\0\2\3\1\275\25\3\31\0"+
    "\2\3\4\0\14\3\1\276\13\3\31\0\2\3\4\0"+
    "\7\3\1\277\20\3\31\0\2\3\4\0\4\3\1\300"+
    "\23\3\31\0\2\3\4\0\6\3\1\301\21\3\31\0"+
    "\2\3\4\0\5\3\1\302\22\3\31\0\2\3\4\0"+
    "\6\3\1\303\21\3\31\0\2\3\4\0\1\3\1\304"+
    "\26\3\31\0\2\3\4\0\2\3\1\305\25\3\31\0"+
    "\2\3\4\0\7\3\1\306\20\3\31\0\2\3\4\0"+
    "\20\3\1\307\7\3\31\0\2\3\4\0\13\3\1\310"+
    "\14\3\31\0\2\3\4\0\6\3\1\311\21\3\31\0"+
    "\2\3\4\0\6\3\1\312\21\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\21\1\2\11\4\1\1\11"+
    "\5\1\10\11\1\1\1\11\2\1\1\0\1\1\1\0"+
    "\2\11\31\1\7\11\1\1\1\11\1\1\7\11\1\0"+
    "\1\1\1\0\2\1\1\0\34\1\2\11\111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;

private int _LineaActual=1;

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

 public int demeLineaToken()
  {
      return _LineaActual;
  } 	  
  
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if(zzBufferL[zzMarkedPos]=='\n')
      {
          _LineaActual++;
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { lexeme=yytext(); return EXTERN;
          }
        case 85: break;
        case 23: 
          { lexeme=yytext(); return LEFTBRACKET;
          }
        case 86: break;
        case 20: 
          { lexeme=yytext(); return RIGHTPAR;
          }
        case 87: break;
        case 46: 
          { lexeme=yytext(); return BITWISEANDASSIGN;
          }
        case 88: break;
        case 22: 
          { lexeme=yytext(); return RIGHTSQUARE;
          }
        case 89: break;
        case 66: 
          { lexeme=yytext(); return FLOAT;
          }
        case 90: break;
        case 47: 
          { lexeme=yytext(); return AND;
          }
        case 91: break;
        case 60: 
          { lexeme=yytext(); return LONG;
          }
        case 92: break;
        case 24: 
          { lexeme=yytext(); return RIGHTBRACKET;
          }
        case 93: break;
        case 34: 
          { lexeme=yytext(); return ADDITIONASSIGN;
          }
        case 94: break;
        case 48: 
          { lexeme=yytext(); return MODULOASSIGN;
          }
        case 95: break;
        case 13: 
          { lexeme=yytext(); return TERNARYCONDITIONAL;
          }
        case 96: break;
        case 73: 
          { lexeme=yytext(); return STRUCT;
          }
        case 97: break;
        case 5: 
          { lexeme=yytext(); return DIVISION;
          }
        case 98: break;
        case 37: 
          { lexeme=yytext(); return STRUCTUREDEREFERENCE;
          }
        case 99: break;
        case 10: 
          { lexeme=yytext(); return SUBTRACTION;
          }
        case 100: break;
        case 78: 
          { lexeme=yytext(); return RETURN;
          }
        case 101: break;
        case 59: 
          { lexeme=yytext(); return ENUM;
          }
        case 102: break;
        case 28: 
          { lexeme=yytext(); return BITWISENOT;
          }
        case 103: break;
        case 41: 
          { lexeme=yytext(); return LESSEQUAL;
          }
        case 104: break;
        case 62: 
          { lexeme=yytext(); return CHAR;
          }
        case 105: break;
        case 33: 
          { lexeme=yytext(); return INCREMENT;
          }
        case 106: break;
        case 50: 
          { lexeme=yytext(); return LISTSTRING;
          }
        case 107: break;
        case 4: 
          { /*Ignore*/
          }
        case 108: break;
        case 49: 
          { lexeme=yytext(); return BITWISEXORASSIGN;
          }
        case 109: break;
        case 77: 
          { lexeme=yytext(); return SWITCH;
          }
        case 110: break;
        case 2: 
          { lexeme=yytext(); return ID;
          }
        case 111: break;
        case 39: 
          { lexeme=yytext(); return GREATEREQUAL;
          }
        case 112: break;
        case 6: 
          { lexeme=yytext(); return MULTIPLICATION;
          }
        case 113: break;
        case 3: 
          { lexeme=yytext(); return ENTERO;
          }
        case 114: break;
        case 52: 
          { lexeme=yytext(); return FLOTANTE;
          }
        case 115: break;
        case 55: 
          { lexeme=yytext(); return BITWISERIGHTASSIGN;
          }
        case 116: break;
        case 67: 
          { lexeme=yytext(); return SHORT;
          }
        case 117: break;
        case 84: 
          { lexeme=yytext(); return VOLATILE;
          }
        case 118: break;
        case 35: 
          { lexeme=yytext(); return DECREMENT;
          }
        case 119: break;
        case 81: 
          { lexeme=yytext(); return UNSIGNED;
          }
        case 120: break;
        case 26: 
          { lexeme=yytext(); return STRUCTUREREFERENCE;
          }
        case 121: break;
        case 12: 
          { lexeme=yytext(); return GREATER;
          }
        case 122: break;
        case 76: 
          { lexeme=yytext(); return SIZEOF;
          }
        case 123: break;
        case 56: 
          { lexeme=yytext(); return BITWISELEFTASSIGN;
          }
        case 124: break;
        case 65: 
          { lexeme=yytext(); return UNION;
          }
        case 125: break;
        case 68: 
          { lexeme=yytext(); return WHILE;
          }
        case 126: break;
        case 69: 
          { lexeme=yytext(); return CONST;
          }
        case 127: break;
        case 9: 
          { lexeme=yytext(); return ADDITION;
          }
        case 128: break;
        case 82: 
          { lexeme=yytext(); return REGISTER;
          }
        case 129: break;
        case 44: 
          { lexeme=yytext(); return BITWISEORASSIGN;
          }
        case 130: break;
        case 25: 
          { lexeme=yytext(); return COLON;
          }
        case 131: break;
        case 17: 
          { lexeme=yytext(); return BITWISEAND;
          }
        case 132: break;
        case 58: 
          { lexeme=yytext(); return ELSE;
          }
        case 133: break;
        case 70: 
          { lexeme=yytext(); return BREAK;
          }
        case 134: break;
        case 11: 
          { lexeme=yytext(); return ASSIGN;
          }
        case 135: break;
        case 63: 
          { lexeme=yytext(); return GOTO;
          }
        case 136: break;
        case 61: 
          { lexeme=yytext(); return CASE;
          }
        case 137: break;
        case 74: 
          { lexeme=yytext(); return STRING;
          }
        case 138: break;
        case 19: 
          { lexeme=yytext(); return LEFTPAR;
          }
        case 139: break;
        case 32: 
          { lexeme=yytext(); return DO;
          }
        case 140: break;
        case 30: 
          { lexeme=yytext(); return MULTIPLICATIONASSIGN;
          }
        case 141: break;
        case 79: 
          { lexeme=yytext(); return TYPEDEF;
          }
        case 142: break;
        case 18: 
          { lexeme=yytext(); return MODULO;
          }
        case 143: break;
        case 53: 
          { lexeme=yytext(); return INT;
          }
        case 144: break;
        case 36: 
          { lexeme=yytext(); return SUBTRACTIONASSIGN;
          }
        case 145: break;
        case 14: 
          { lexeme=yytext(); return LESS;
          }
        case 146: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 147: break;
        case 15: 
          { lexeme=yytext(); return NOT;
          }
        case 148: break;
        case 27: 
          { lexeme=yytext(); return BITWISEXOR;
          }
        case 149: break;
        case 43: 
          { lexeme=yytext(); return NOTEQUAL;
          }
        case 150: break;
        case 45: 
          { lexeme=yytext(); return OR;
          }
        case 151: break;
        case 7: 
          { lexeme=yytext();return COMMA;
          }
        case 152: break;
        case 57: 
          { lexeme=yytext(); return AUTO;
          }
        case 153: break;
        case 64: 
          { lexeme=yytext(); return VOID;
          }
        case 154: break;
        case 75: 
          { lexeme=yytext(); return SIGNED;
          }
        case 155: break;
        case 29: 
          { lexeme=yytext(); return DIVISIONASSIGN;
          }
        case 156: break;
        case 42: 
          { lexeme=yytext(); return BITWISELEFT;
          }
        case 157: break;
        case 21: 
          { lexeme=yytext(); return LEFTSQUARE;
          }
        case 158: break;
        case 54: 
          { lexeme=yytext(); return FOR;
          }
        case 159: break;
        case 72: 
          { lexeme=yytext(); return STATIC;
          }
        case 160: break;
        case 31: 
          { lexeme=yytext(); return IF;
          }
        case 161: break;
        case 40: 
          { lexeme=yytext(); return BITWISERIGHT;
          }
        case 162: break;
        case 51: 
          { lexeme=yytext(); return LISTCHAR;
          }
        case 163: break;
        case 80: 
          { lexeme=yytext(); return DEFAULT;
          }
        case 164: break;
        case 16: 
          { lexeme=yytext(); return BITWISEOR;
          }
        case 165: break;
        case 83: 
          { lexeme=yytext(); return CONTINUE;
          }
        case 166: break;
        case 38: 
          { lexeme=yytext(); return EQUALS;
          }
        case 167: break;
        case 8: 
          { lexeme=yytext(); return SEMICOLON;
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
