
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Nov 28 07:01:40 CST 2012
//----------------------------------------------------

package scanner;

import java.io.*;
import java_cup.runtime.*;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Collections;

/** CUP v0.10k generated parser.
  * @version Wed Nov 28 07:01:40 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\072\004\000\002\072" +
    "\003\000\002\072\002\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\014\003\000\002\014\003\000" +
    "\002\052\003\000\002\007\003\000\002\051\003\000\002" +
    "\005\003\000\002\006\003\000\002\050\003\000\002\047" +
    "\003\000\002\046\003\000\002\045\003\000\002\063\003" +
    "\000\002\016\003\000\002\023\005\000\002\023\003\000" +
    "\002\042\003\000\002\041\003\000\002\030\003\000\002" +
    "\031\003\000\002\032\003\000\002\034\003\000\002\033" +
    "\003\000\002\040\003\000\002\037\003\000\002\035\003" +
    "\000\002\036\003\000\002\021\003\000\002\022\003\000" +
    "\002\101\010\000\002\101\006\000\002\101\002\000\002" +
    "\003\004\000\002\065\013\000\002\065\012\000\002\065" +
    "\012\000\002\065\011\000\002\065\006\000\002\065\003" +
    "\000\002\004\004\000\002\004\004\000\002\013\004\000" +
    "\002\027\012\000\002\027\011\000\002\027\011\000\002" +
    "\027\010\000\002\027\005\000\002\027\003\000\002\062" +
    "\003\000\002\062\003\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\057\003\000\002\057\003\000" +
    "\002\043\003\000\002\044\003\000\002\061\005\000\002" +
    "\061\002\000\002\060\006\000\002\060\004\000\002\060" +
    "\003\000\002\070\006\000\002\070\007\000\002\011\004" +
    "\000\002\071\004\000\002\071\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\010" +
    "\005\000\002\010\005\000\002\024\007\000\002\024\006" +
    "\000\002\025\007\000\002\073\005\000\002\073\007\000" +
    "\002\073\003\000\002\074\005\000\002\074\007\000\002" +
    "\012\004\000\002\020\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\075\005\000\002\076\005\000\002" +
    "\100\004\000\002\077\005\000\002\077\005\000\002\077" +
    "\005\000\002\077\005\000\002\077\005\000\002\077\005" +
    "\000\002\077\003\000\002\077\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\054\006\000\002\054\003\000\002" +
    "\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\012\002\ufffe\003\011\004\004\005\007\001" +
    "\002\000\004\045\uffcb\001\002\000\010\003\011\004\056" +
    "\005\007\001\002\000\004\045\044\001\002\000\004\045" +
    "\uffca\001\002\000\004\002\uffd5\001\002\000\070\002\uff80" +
    "\003\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013" +
    "\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80" +
    "\024\uff80\025\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034" +
    "\uff80\036\uff80\040\uff80\041\uff80\043\uff80\044\uff80\045\uff80" +
    "\001\002\000\004\002\043\001\002\000\004\002\uffff\001" +
    "\002\000\010\027\uffc1\041\uffc1\042\015\001\002\000\012" +
    "\003\uffeb\004\uffeb\005\uffeb\045\uffeb\001\002\000\006\027" +
    "\025\041\023\001\002\000\004\045\020\001\002\000\050" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\036\uffee\041\uffee\042\uffee\001" +
    "\002\000\010\027\uffc1\041\uffc1\042\015\001\002\000\006" +
    "\027\uffc2\041\uffc2\001\002\000\034\003\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\040\ufff8\043\ufff8\044\ufff8\045\ufff8\001\002\000\030\003" +
    "\uffdc\004\040\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\016\003" +
    "\ufff6\035\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\001\002" +
    "\000\012\003\011\043\035\044\033\046\034\001\002\000" +
    "\004\041\ufffd\001\002\000\004\041\023\001\002\000\004" +
    "\041\ufffb\001\002\000\004\041\ufffc\001\002\000\044\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\036\ufff9\041\ufff9\001\002\000\004\041\uffef" +
    "\001\002\000\044\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\041\ufffa\001" +
    "\002\000\030\003\uffdc\004\040\005\uffdc\006\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\043\uffdc\044\uffdc\045\uffdc\001" +
    "\002\000\030\003\uffde\004\uffde\005\uffde\006\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\043\uffde\044\uffde\045\uffde\001" +
    "\002\000\004\045\041\001\002\000\010\027\uffdb\041\uffdb" +
    "\042\uffdb\001\002\000\030\003\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\001\002\000\004\002\001\001\002\000\006\035" +
    "\346\036\uffee\001\002\000\012\003\011\004\056\005\007" +
    "\036\047\001\002\000\004\036\047\001\002\000\064\003" +
    "\ufff2\006\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2" +
    "\037\ufff2\041\ufff2\043\ufff2\044\ufff2\045\ufff2\001\002\000" +
    "\004\003\011\001\002\000\004\002\uffd6\001\002\000\004" +
    "\045\020\001\002\000\004\036\uffbe\001\002\000\004\037" +
    "\060\001\002\000\004\036\047\001\002\000\004\045\uffcb" +
    "\001\002\000\004\037\060\001\002\000\030\003\ufff1\004" +
    "\ufff1\006\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\040\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\001\002\000\026\003\uffdc\004" +
    "\040\006\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\001\002\000\024\003\011\006\075\010" +
    "\070\011\073\012\063\013\077\043\035\044\033\045\020" +
    "\001\002\000\004\035\uffdf\001\002\000\010\014\264\015" +
    "\263\027\025\001\002\000\030\003\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\040\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\001\002\000\022\003\011\026\142\035\113" +
    "\043\035\044\033\045\020\047\145\050\153\001\002\000" +
    "\030\003\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\040\uffb3\043\uffb3\044\uffb3\045\uffb3\001\002\000" +
    "\004\035\322\001\002\000\006\014\264\015\263\001\002" +
    "\000\004\040\266\001\002\000\010\043\ufff7\044\ufff7\045" +
    "\ufff7\001\002\000\006\014\264\015\263\001\002\000\004" +
    "\035\257\001\002\000\004\035\113\001\002\000\004\035" +
    "\uffe0\001\002\000\010\043\035\044\033\045\020\001\002" +
    "\000\030\003\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012" +
    "\uff81\013\uff81\040\uff81\043\uff81\044\uff81\045\uff81\001\002" +
    "\000\030\003\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\040\uffb7\043\uffb7\044\uffb7\045\uffb7\001\002" +
    "\000\022\003\011\026\142\035\113\043\035\044\033\045" +
    "\020\047\145\050\153\001\002\000\026\003\011\006\075" +
    "\010\070\011\073\012\063\013\077\040\uffb9\043\035\044" +
    "\033\045\020\001\002\000\030\003\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\040\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\001\002\000\030\003\uffaa\006\uffaa\007\125" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\040\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\001\002\000\030\003\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\040\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\001\002\000\004\035\113\001\002\000\030" +
    "\003\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\040\uffb4\043\uffb4\044\uffb4\045\uffb4\001\002\000\030" +
    "\003\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\040\uffb6\043\uffb6\044\uffb6\045\uffb6\001\002\000\024" +
    "\003\ufff3\026\ufff3\035\ufff3\036\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\047\ufff3\050\ufff3\001\002\000\006\036\047\045\020" +
    "\001\002\000\004\036\047\001\002\000\004\041\023\001" +
    "\002\000\006\036\uffec\042\015\001\002\000\004\045\020" +
    "\001\002\000\004\036\uffed\001\002\000\030\003\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\040\uffae" +
    "\043\uffae\044\uffae\045\uffae\001\002\000\004\041\023\001" +
    "\002\000\030\003\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\040\uffaf\043\uffaf\044\uffaf\045\uffaf\001" +
    "\002\000\026\003\uffea\006\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\037\uffea\043\uffea\044\uffea\045\uffea\001\002\000" +
    "\026\003\011\006\075\010\070\011\073\012\063\013\077" +
    "\037\060\043\035\044\033\045\020\001\002\000\024\003" +
    "\011\006\075\010\070\011\073\012\063\013\077\043\035" +
    "\044\033\045\020\001\002\000\030\003\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\040\uffac\043\uffac" +
    "\044\uffac\045\uffac\001\002\000\004\040\132\001\002\000" +
    "\030\003\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\040\ufff0\043\ufff0\044\ufff0\045\ufff0\001\002\000" +
    "\030\003\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\040\uffab\043\uffab\044\uffab\045\uffab\001\002\000" +
    "\004\040\uffba\001\002\000\040\016\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\036\uff86\041\uff86\001\002" +
    "\000\040\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\024\uff84\025\uff84\030\205\031\177\032\202\033\204" +
    "\034\201\036\uff84\041\uff84\001\002\000\004\036\047\001" +
    "\002\000\040\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\030\205\031\177\032\202\033" +
    "\204\034\201\036\uff85\041\uff85\001\002\000\004\036\uffa4" +
    "\001\002\000\022\003\uffe7\026\uffe7\035\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\001\002\000\010\024\uff92" +
    "\025\uff92\036\uff92\001\002\000\030\016\215\017\222\020" +
    "\213\021\214\022\223\023\211\030\205\031\177\032\202" +
    "\033\204\034\201\001\002\000\010\024\ufff4\025\ufff4\036" +
    "\ufff4\001\002\000\004\036\234\001\002\000\010\024\uff93" +
    "\025\uff93\036\uff93\001\002\000\004\036\uffa2\001\002\000" +
    "\022\003\011\026\142\035\113\043\035\044\033\045\020" +
    "\047\145\050\153\001\002\000\032\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\036\uff9d\001\002\000\010\024\ufff5\025" +
    "\ufff5\036\ufff5\001\002\000\022\003\011\026\142\035\113" +
    "\043\035\044\033\045\020\047\145\050\153\001\002\000" +
    "\004\036\uffa3\001\002\000\010\024\161\025\160\036\uffa5" +
    "\001\002\000\022\003\011\026\142\035\113\043\035\044" +
    "\033\045\020\047\145\050\153\001\002\000\022\003\uffe9" +
    "\026\uffe9\035\uffe9\043\uffe9\044\uffe9\045\uffe9\047\uffe9\050" +
    "\uffe9\001\002\000\022\003\uffe8\026\uffe8\035\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\047\uffe8\050\uffe8\001\002\000\022\003" +
    "\011\026\142\035\113\043\035\044\033\045\020\047\145" +
    "\050\153\001\002\000\004\036\uff9b\001\002\000\004\036" +
    "\uff9c\001\002\000\004\036\047\001\002\000\032\016\215" +
    "\017\222\020\213\021\214\022\223\023\211\030\205\031" +
    "\177\032\202\033\204\034\201\036\047\001\002\000\004" +
    "\036\047\001\002\000\040\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\036\uff83\041\uff83\001\002\000" +
    "\014\003\011\035\113\043\035\044\033\045\020\001\002" +
    "\000\004\036\047\001\002\000\010\024\161\025\160\036" +
    "\047\001\002\000\004\036\uffa1\001\002\000\004\036\uff9f" +
    "\001\002\000\016\030\205\031\177\032\202\033\204\034" +
    "\201\036\047\001\002\000\014\003\uff90\035\uff90\043\uff90" +
    "\044\uff90\045\uff90\001\002\000\014\003\011\035\113\043" +
    "\035\044\033\045\020\001\002\000\014\003\uff8d\035\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\001\002\000\014\003\uff8f\035" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\001\002\000\040\016\uff87" +
    "\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\036\uff87" +
    "\041\uff87\001\002\000\014\003\uff8e\035\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\001\002\000\014\003\uff91\035\uff91\043\uff91" +
    "\044\uff91\045\uff91\001\002\000\040\016\uff88\017\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\030\205" +
    "\031\177\032\202\033\204\034\201\036\uff88\041\uff88\001" +
    "\002\000\004\036\uff9e\001\002\000\014\003\011\035\113" +
    "\043\035\044\033\045\020\001\002\000\014\003\uffe1\035" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000\014\003\011" +
    "\035\113\043\035\044\033\045\020\001\002\000\014\003" +
    "\uffe6\035\uffe6\043\uffe6\044\uffe6\045\uffe6\001\002\000\014" +
    "\003\uffe3\035\uffe3\043\uffe3\044\uffe3\045\uffe3\001\002\000" +
    "\014\003\uffe2\035\uffe2\043\uffe2\044\uffe2\045\uffe2\001\002" +
    "\000\014\003\011\035\113\043\035\044\033\045\020\001" +
    "\002\000\014\003\011\035\113\043\035\044\033\045\020" +
    "\001\002\000\014\003\011\035\113\043\035\044\033\045" +
    "\020\001\002\000\014\003\011\035\113\043\035\044\033" +
    "\045\020\001\002\000\014\003\uffe4\035\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\001\002\000\014\003\uffe5\035\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\001\002\000\022\024\uff98\025\uff98\030" +
    "\205\031\177\032\202\033\204\034\201\036\uff98\001\002" +
    "\000\022\024\uff99\025\uff99\030\205\031\177\032\202\033" +
    "\204\034\201\036\uff99\001\002\000\022\024\uff94\025\uff94" +
    "\030\205\031\177\032\202\033\204\034\201\036\uff94\001" +
    "\002\000\022\024\uff97\025\uff97\030\205\031\177\032\202" +
    "\033\204\034\201\036\uff97\001\002\000\022\024\uff96\025" +
    "\uff96\030\205\031\177\032\202\033\204\034\201\036\uff96" +
    "\001\002\000\022\024\uff95\025\uff95\030\205\031\177\032" +
    "\202\033\204\034\201\036\uff95\001\002\000\004\036\uffa0" +
    "\001\002\000\004\036\uff9a\001\002\000\030\003\uffa6\006" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\036\uffa6\037\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\001\002\000\010\043\035\044" +
    "\033\045\020\001\002\000\040\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\036\uff8c\041\uff8c\001\002" +
    "\000\040\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\036\uff8b\041\uff8b\001\002\000\026\003\011\006" +
    "\075\010\070\011\073\012\063\013\077\037\060\043\035" +
    "\044\033\045\020\001\002\000\004\040\132\001\002\000" +
    "\030\003\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\040\uffbd\043\uffbd\044\uffbd\045\uffbd\001\002\000" +
    "\030\003\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\040\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002\000" +
    "\010\043\035\044\033\045\020\001\002\000\040\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\036\uff8a" +
    "\041\uff8a\001\002\000\040\016\uff89\017\uff89\020\uff89\021" +
    "\uff89\022\uff89\023\uff89\024\uff89\025\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\036\uff89\041\uff89\001\002\000" +
    "\004\041\023\001\002\000\004\041\023\001\002\000\030" +
    "\003\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\040\uffb0\043\uffb0\044\uffb0\045\uffb0\001\002\000\030" +
    "\003\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\040\uffb1\043\uffb1\044\uffb1\045\uffb1\001\002\000\014" +
    "\003\011\035\113\043\035\044\033\045\020\001\002\000" +
    "\016\030\205\031\177\032\202\033\204\034\201\036\047" +
    "\001\002\000\004\041\023\001\002\000\030\003\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\040\uffad" +
    "\043\uffad\044\uffad\045\uffad\001\002\000\022\003\uffa7\026" +
    "\uffa7\035\uffa7\043\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7" +
    "\001\002\000\004\041\uffc6\001\002\000\004\041\023\001" +
    "\002\000\004\041\uffc5\001\002\000\004\041\uffc3\001\002" +
    "\000\004\041\uffc4\001\002\000\030\003\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\040\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\001\002\000\010\002\ufff0\004\317\005" +
    "\316\001\002\000\004\002\uffd9\001\002\000\006\003\011" +
    "\045\044\001\002\000\004\002\uffcc\001\002\000\004\002" +
    "\uffda\001\002\000\012\003\011\004\056\005\007\036\047" +
    "\001\002\000\004\036\047\001\002\000\004\003\011\001" +
    "\002\000\004\002\uffcd\001\002\000\004\037\060\001\002" +
    "\000\004\036\047\001\002\000\004\037\060\001\002\000" +
    "\026\003\uffdc\004\040\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\024\003" +
    "\011\006\075\010\070\011\073\012\063\013\077\043\035" +
    "\044\033\045\020\001\002\000\004\040\266\001\002\000" +
    "\004\002\uffd0\001\002\000\006\003\011\045\044\001\002" +
    "\000\004\002\uffd1\001\002\000\026\003\uffdc\004\040\006" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\001\002\000\024\003\011\006\075\010\070\011" +
    "\073\012\063\013\077\043\035\044\033\045\020\001\002" +
    "\000\004\040\266\001\002\000\004\002\uffce\001\002\000" +
    "\006\003\011\045\044\001\002\000\004\002\uffcf\001\002" +
    "\000\006\003\uffd3\045\uffd3\001\002\000\006\003\uffd4\045" +
    "\uffd4\001\002\000\004\041\023\001\002\000\030\003\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\040" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002\000\022\003\uffbb" +
    "\026\uffbb\035\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\001\002\000\026\003\011\006\075\010\070\011\073" +
    "\012\063\013\077\037\060\043\035\044\033\045\020\001" +
    "\002\000\024\003\011\006\075\010\070\011\073\012\063" +
    "\013\077\043\035\044\033\045\020\001\002\000\030\003" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\040\uffa9\043\uffa9\044\uffa9\045\uffa9\001\002\000\004\040" +
    "\132\001\002\000\030\003\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\040\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\001\002\000\004\041\023\001\002\000\014\003\011" +
    "\035\113\043\035\044\033\045\020\001\002\000\016\030" +
    "\205\031\177\032\202\033\204\034\201\041\023\001\002" +
    "\000\030\003\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\040\uff82\043\uff82\044\uff82\045\uff82\001\002" +
    "\000\030\003\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\040\uffc7\043\uffc7\044\uffc7\045\uffc7\001\002" +
    "\000\026\003\uffdc\004\040\006\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\024" +
    "\003\011\006\075\010\070\011\073\012\063\013\077\043" +
    "\035\044\033\045\020\001\002\000\004\040\266\001\002" +
    "\000\004\002\uffd7\001\002\000\006\003\011\045\044\001" +
    "\002\000\004\002\uffd8\001\002\000\006\036\uffbf\042\015" +
    "\001\002\000\010\003\011\004\056\005\007\001\002\000" +
    "\004\036\uffc0\001\002\000\012\003\uffd2\004\uffd2\005\uffd2" +
    "\036\uffd2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\016\003\013\026\007\062\005\065\012\072" +
    "\011\101\004\001\001\000\002\001\001\000\010\026\007" +
    "\062\005\065\346\001\001\000\006\013\044\016\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\016\061" +
    "\015\001\001\000\002\001\001\000\006\051\025\052\023" +
    "\001\001\000\004\016\020\001\001\000\002\001\001\000" +
    "\006\042\016\061\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\013\101\041\001\001\000\002\001" +
    "\001\000\012\014\026\026\030\063\031\066\027\001\001" +
    "\000\002\001\001\000\004\052\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\013\101\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\052\047\053\060\054\062\051\001\001\000\004\047\047" +
    "\001\001\000\002\001\001\000\004\026\050\001\001\000" +
    "\002\001\001\000\004\016\342\001\001\000\002\001\001" +
    "\000\004\046\334\001\001\000\004\047\056\001\001\000" +
    "\002\001\001\000\004\046\060\001\001\000\002\001\001" +
    "\000\006\003\013\101\061\001\001\000\050\007\077\010" +
    "\106\011\102\012\065\014\070\016\063\021\075\022\107" +
    "\024\111\025\064\026\100\054\104\056\101\064\073\067" +
    "\103\070\110\071\071\073\066\074\105\001\001\000\002" +
    "\001\001\000\012\043\257\044\261\051\330\057\327\001" +
    "\001\000\002\001\001\000\040\005\146\006\142\014\137" +
    "\015\145\016\135\020\322\026\151\032\150\050\153\053" +
    "\134\055\143\075\140\076\154\077\155\100\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\257\044" +
    "\261\057\317\001\001\000\006\004\267\045\266\001\001" +
    "\000\002\001\001\000\010\043\257\044\261\057\260\001" +
    "\001\000\002\001\001\000\004\050\252\001\001\000\002" +
    "\001\001\000\006\014\246\016\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\005\146\006\142\014\137" +
    "\015\145\016\135\020\136\026\151\032\150\050\153\053" +
    "\134\055\143\075\140\076\154\077\155\100\147\001\001" +
    "\000\050\007\077\010\106\011\102\012\065\014\070\016" +
    "\063\021\075\022\107\024\111\025\064\026\100\054\104" +
    "\056\101\064\073\067\103\070\110\071\133\073\066\074" +
    "\105\001\001\000\002\001\001\000\004\041\125\001\001" +
    "\000\002\001\001\000\004\050\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\116" +
    "\023\114\047\115\001\001\000\004\047\122\001\001\000" +
    "\004\052\121\001\001\000\004\042\117\001\001\000\006" +
    "\016\116\023\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\077\010\106\011\102\012\065\014" +
    "\070\016\063\021\075\022\107\024\111\025\064\026\100" +
    "\046\126\054\104\056\101\064\073\067\127\070\110\073" +
    "\066\074\105\001\001\000\050\007\077\010\106\011\102" +
    "\012\065\014\070\016\063\021\075\022\107\024\111\025" +
    "\064\026\100\054\104\056\101\064\073\067\103\070\110" +
    "\071\130\073\066\074\105\001\001\000\002\001\001\000" +
    "\004\045\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\243\001" +
    "\001\000\004\047\237\001\001\000\004\017\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\177\033\220\034\217\035\207\036\216\037\211" +
    "\040\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\146\006\142" +
    "\014\137\015\232\016\135\026\151\032\150\050\153\053" +
    "\134\055\143\075\140\076\154\077\155\100\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\146\006" +
    "\142\014\137\016\135\026\167\032\150\050\170\053\134" +
    "\055\165\075\164\076\171\077\172\100\166\001\001\000" +
    "\002\001\001\000\006\030\156\031\161\001\001\000\036" +
    "\005\146\006\142\014\137\015\163\016\135\026\151\032" +
    "\150\050\153\053\134\055\143\075\140\076\154\077\155" +
    "\100\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\146\006\142\014\137\015\162\016\135\026\151" +
    "\032\150\050\153\053\134\055\143\075\140\076\154\077" +
    "\155\100\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\231\001\001\000\022\017\177\033\220\034" +
    "\217\035\207\036\216\037\211\040\215\047\202\001\001" +
    "\000\004\047\206\001\001\000\002\001\001\000\016\014" +
    "\137\016\135\026\167\050\170\053\134\055\175\001\001" +
    "\000\004\047\174\001\001\000\010\030\156\031\161\047" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\177\047\202\001\001\000\002\001\001\000\016\014" +
    "\137\016\135\026\167\050\170\053\134\055\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\177\001\001" +
    "\000\002\001\001\000\016\014\137\016\135\026\167\050" +
    "\170\053\134\055\230\001\001\000\002\001\001\000\016" +
    "\014\137\016\135\026\167\050\170\053\134\055\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\137\016\135\026\167\050\170\053\134\055" +
    "\226\001\001\000\016\014\137\016\135\026\167\050\170" +
    "\053\134\055\225\001\001\000\016\014\137\016\135\026" +
    "\167\050\170\053\134\055\224\001\001\000\016\014\137" +
    "\016\135\026\167\050\170\053\134\055\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\177\001\001" +
    "\000\004\017\177\001\001\000\004\017\177\001\001\000" +
    "\004\017\177\001\001\000\004\017\177\001\001\000\004" +
    "\017\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\235\016\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\007\077\010\106\011" +
    "\102\012\065\014\070\016\063\021\075\022\107\024\111" +
    "\025\064\026\100\046\240\054\104\056\101\064\073\067" +
    "\241\070\110\073\066\074\105\001\001\000\004\045\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\244\016\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\251\001\001\000\004\052\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\137\016\135" +
    "\026\167\050\170\053\134\055\253\001\001\000\006\017" +
    "\177\047\254\001\001\000\004\052\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\272\016\273\026\270\027\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\052\047" +
    "\276\060\277\062\051\001\001\000\004\047\274\001\001" +
    "\000\004\026\275\001\001\000\002\001\001\000\004\046" +
    "\307\001\001\000\004\047\300\001\001\000\004\046\301" +
    "\001\001\000\006\003\013\101\302\001\001\000\050\007" +
    "\077\010\106\011\102\012\065\014\070\016\063\021\075" +
    "\022\107\024\111\025\064\026\100\054\104\056\101\064" +
    "\073\067\103\070\110\071\303\073\066\074\105\001\001" +
    "\000\006\004\305\045\304\001\001\000\002\001\001\000" +
    "\012\013\272\016\273\026\270\027\306\001\001\000\002" +
    "\001\001\000\006\003\013\101\310\001\001\000\050\007" +
    "\077\010\106\011\102\012\065\014\070\016\063\021\075" +
    "\022\107\024\111\025\064\026\100\054\104\056\101\064" +
    "\073\067\103\070\110\071\311\073\066\074\105\001\001" +
    "\000\006\004\313\045\312\001\001\000\002\001\001\000" +
    "\012\013\272\016\273\026\270\027\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\007\077\010\106\011\102\012\065\014\070\016\063\021" +
    "\075\022\107\024\111\025\064\026\100\046\323\054\104" +
    "\056\101\064\073\067\324\070\110\073\066\074\105\001" +
    "\001\000\050\007\077\010\106\011\102\012\065\014\070" +
    "\016\063\021\075\022\107\024\111\025\064\026\100\054" +
    "\104\056\101\064\073\067\103\070\110\071\325\073\066" +
    "\074\105\001\001\000\002\001\001\000\004\045\326\001" +
    "\001\000\002\001\001\000\004\052\333\001\001\000\016" +
    "\014\137\016\135\026\167\050\170\053\134\055\331\001" +
    "\001\000\006\017\177\052\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\013\101\335\001\001\000" +
    "\050\007\077\010\106\011\102\012\065\014\070\016\063" +
    "\021\075\022\107\024\111\025\064\026\100\054\104\056" +
    "\101\064\073\067\103\070\110\071\336\073\066\074\105" +
    "\001\001\000\006\004\340\045\337\001\001\000\002\001" +
    "\001\000\012\013\272\016\273\026\270\027\341\001\001" +
    "\000\002\001\001\000\004\042\343\001\001\000\010\026" +
    "\052\060\344\062\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	String X;
	Stack<String> pila = new Stack<String>();
	Semantico s = new Semantico();
	boolean flagop = false;
	int contador;
	
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
		new parser(new Yylex(System.in)).parse();
	}
	public void syntax_error(Symbol s){
		String X =("Error sintactico en la linea " + (s.right + 1) + ". Se espera algo antes del token \"" + s.value + "\". \n");
		try{
			  // Create file 
			  BufferedWriter out = new BufferedWriter(new FileWriter("error.txt", true));
			  out.write(X);
			  //Close the output stream
			  out.close();
			  }catch (Exception e){//Catch exception if any
			  System.err.println("Error: " + e.getMessage());
				}
	}
	
	public  int InsTabla(String elem){
        int num;
        pila.push(elem);
        num = pila.size()-1;
        return num;
    }
	
	public  String GetTabla(int num){
        String ele;
        ele = pila.get(num);
        return ele;
    }
        public String ERRORESSEM(){
            return s.ERRORESSEM();
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Err ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*Err*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expresion_arit_init ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expresion_arit_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expresion_arit_init ::= Literal_id Assign Expresion_arit Semicolon 
            {
              Object RESULT = null;
		 parser.s.Assig();  
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expresion_arit_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expresion_arit ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expresion_arit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expresion_arit ::= Literal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expresion_arit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expresion_arit ::= Literal_num 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expresion_arit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expresion_arit ::= Oper_aritmeticas 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expresion_arit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expresion_arit ::= Leftpar Expresion_arit Rightpar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expresion_arit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expresion_arit ::= Expresion_arit Op_aritmeticos Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expresion_arit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Oper_aritmeticas ::= Literal_id Op_aritmeticos Literal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*Oper_aritmeticas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Oper_aritmeticas ::= Literal_id Op_aritmeticos Literal_num 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*Oper_aritmeticas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Oper_aritmeticas ::= Literal_num Op_aritmeticos Literal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*Oper_aritmeticas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Oper_aritmeticas ::= Literal_num Op_aritmeticos Literal_num 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*Oper_aritmeticas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Op_aritmeticos ::= MODULO 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.flagop=true;parser.s.Oper(parser.InsTabla(op),op);  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Op_aritmeticos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Op_aritmeticos ::= DIVISION 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.flagop=true;parser.s.Oper(parser.InsTabla(op),op);  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Op_aritmeticos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Op_aritmeticos ::= MULTIPLICATION 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.flagop=true;parser.s.Oper(parser.InsTabla(op),op);  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Op_aritmeticos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Op_aritmeticos ::= SUBTRACTION 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.flagop=true;parser.s.Oper(parser.InsTabla(op),op);  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Op_aritmeticos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Op_aritmeticos ::= ADDITION 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.flagop=true;parser.s.Oper(parser.InsTabla(op),op);  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Op_aritmeticos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Condicion_logica ::= True 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Condicion_logica ::= False 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Condicion_logica ::= Expresion_arit Noteq Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Condicion_logica ::= Expresion_arit Eq Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Condicion_logica ::= Expresion_arit Lesseq Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Condicion_logica ::= Expresion_arit Greatereq Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Condicion_logica ::= Expresion_arit Less Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Condicion_logica ::= Expresion_arit Greater Expresion_arit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*Condicion_logica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Condicion_not ::= Not Condicion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(62/*Condicion_not*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Condicion_or ::= Condicion_logica Or Condicion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*Condicion_or*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Condicion_and ::= Condicion_logica And Condicion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(59/*Condicion_and*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Condicion ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Condicion ::= Leftpar Condicion_not Rightpar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Condicion ::= Leftpar Condicion_or Rightpar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Condicion ::= Leftpar Condicion_and Rightpar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Condicion ::= Leftpar Condicion_logica Rightpar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condicion ::= Condicion_not 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Condicion ::= Condicion_or 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condicion ::= Condicion_and 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condicion ::= Condicion_logica 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*Condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondicionTest ::= Condicion RIGHTPAR 
            {
              Object RESULT = null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  ArrayList<String> lista = new ArrayList();
									int num = parser.InsTabla(ele);
									while (parser.GetTabla(num).equals("test".concat(String.valueOf(parser.contador)))!=true){
									lista.add(parser.GetTabla(num));
									num--;}
									Collections.reverse(lista);
									parser.s.Par(ele);
                                    parser.s.Test(lista);
									
              CUP$parser$result = new java_cup.runtime.Symbol(14/*CondicionTest*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IfPar ::= IF LEFTPAR 
            {
              Object RESULT = null;
		int ele1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ele1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ele1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ele2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ele2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.s.StartIf(parser.InsTabla(ele1),ele1); parser.contador++; parser.InsTabla("test".concat(String.valueOf(parser.contador)));parser.s.Par(ele2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*IfPar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // If ::= IfPar CondicionTest Leftbracket Lista_sentencias Rightbracket 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*If*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // If ::= IfPar CondicionTest Sentencia 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*If*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // If_else ::= If 
            {
              Object RESULT = null;
		 parser.s.EndIf(); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*If_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // If_else ::= If Else Leftbracket Lista_sentencias Rightbracket 
            {
              Object RESULT = null;
		 parser.s.EndIfElse(); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*If_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // If_else ::= If Else Sentencia 
            {
              Object RESULT = null;
		 parser.s.EndIfElse(); 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*If_else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Write ::= Write_tok Leftpar Expresion_arit Rightpar Semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*Write*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Read ::= Read_tok Leftpar Rightpar Semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*Read*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Read ::= Read_tok Leftpar Lista_id Rightpar Semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*Read*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Return ::= Ret_tok Literal_id Semicolon 
            {
              Object RESULT = null;
		 parser.s.Ret();  
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Return*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Return ::= Ret_tok Literal_num Semicolon 
            {
              Object RESULT = null;
		 parser.s.Ret();  
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Return*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Sentencia ::= Return 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Sentencia ::= If_else 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Sentencia ::= While 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Sentencia ::= Expresion_arit_init 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Sentencia ::= Read 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Sentencia ::= Op_PosfijaAritmetica 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Sentencia ::= Write 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*Sentencia*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Lista_sentencias ::= Sentencia 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*Lista_sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Lista_sentencias ::= Sentencia Lista_sentencias 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*Lista_sentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WhilePar ::= WHILE LEFTPAR 
            {
              Object RESULT = null;
		int ele1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ele1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ele1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ele2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ele2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.s.StartWhile(parser.InsTabla(ele1),ele1); parser.contador++; parser.InsTabla("test".concat(String.valueOf(parser.contador))); parser.s.Par(ele2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*WhilePar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // While ::= WhilePar CondicionTest Rightpar Leftbracket Rightbracket 
            {
              Object RESULT = null;
		 parser.s.EndWhile(); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*While*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // While ::= WhilePar CondicionTest Rightpar Sentencia 
            {
              Object RESULT = null;
		 parser.s.EndWhile(); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*While*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Lista_parametros ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*Lista_parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Lista_parametros ::= Tipo Literal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*Lista_parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Lista_parametros ::= Tipo Literal_id Coma Lista_parametros 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*Lista_parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Lista_var ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*Lista_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Lista_var ::= Coma Literal_id Lista_var 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*Lista_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Op_Posfijo_Neg ::= DECREMENT 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 int x = parser.InsTabla(op); parser.s.Oper(x,op); parser.s.eval_unary(parser.GetTabla(x-1),parser.GetTabla(x));  
              CUP$parser$result = new java_cup.runtime.Symbol(34/*Op_Posfijo_Neg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Op_Posfijo_Pos ::= INCREMENT 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 int x = parser.InsTabla(op); parser.s.Oper(x,op); parser.s.eval_unary(parser.GetTabla(x-1),parser.GetTabla(x));  
              CUP$parser$result = new java_cup.runtime.Symbol(33/*Op_Posfijo_Pos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Op_Posfijo ::= Op_Posfijo_Neg 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*Op_Posfijo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Op_Posfijo ::= Op_Posfijo_Pos 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*Op_Posfijo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Op_PosfijaAritmetica ::= Literal_id Op_Posfijo Semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*Op_PosfijaAritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Op_PosfijaAritmetica ::= Literal_char Op_Posfijo Semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*Op_PosfijaAritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Op_PosfijaAritmetica ::= Literal_num Op_Posfijo Semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*Op_PosfijaAritmetica*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo ::= VOID 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele);  
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo ::= INT 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele);  
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Funciones_dos ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*Funciones_dos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Funciones_dos ::= Literal_id Rightpar Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*Funciones_dos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Funciones_dos ::= LiteralPar Rightpar Leftbracket Variables Lista_sentencias Rightbracket 
            {
              Object RESULT = null;
		 parser.s.FinFun(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Funciones_dos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Funciones_dos ::= LiteralPar Rightpar Leftbracket Variables Lista_sentencias BrackTip Funciones_dos 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*Funciones_dos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Funciones_dos ::= LiteralPar Lista_parametros Rightpar Leftbracket Variables Lista_sentencias Rightbracket 
            {
              Object RESULT = null;
		 parser.s.FinFun(); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*Funciones_dos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Funciones_dos ::= LiteralPar Lista_parametros Rightpar Leftbracket Variables Lista_sentencias BrackTip Funciones_dos 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*Funciones_dos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LiteralPar ::= ID LEFTPAR 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 int x = parser.InsTabla(id); parser.s.Fun(x,id,parser.GetTabla(x-1));parser.s.Par(ele); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*LiteralPar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BrackTip ::= RIGHTBRACKET VOID 
            {
              Object RESULT = null;
		int ele2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ele2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ele2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele2); parser.s.Par(ele2); parser.InsTabla(ele); parser.s.FinFun(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*BrackTip*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BrackTip ::= RIGHTBRACKET INT 
            {
              Object RESULT = null;
		int ele2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ele2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ele2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele2); parser.s.Par(ele2); parser.InsTabla(ele); parser.s.FinFun(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*BrackTip*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Funciones ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*Funciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Funciones ::= Tipo Literal_id Rightpar Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*Funciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Funciones ::= Tipo LiteralPar Rightpar Leftbracket Variables Lista_sentencias Rightbracket 
            {
              Object RESULT = null;
		 parser.s.FinFun(); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Funciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Funciones ::= Tipo LiteralPar Rightpar Leftbracket Variables Lista_sentencias BrackTip Funciones_dos 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*Funciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Funciones ::= Tipo LiteralPar Lista_parametros Rightpar Leftbracket Variables Lista_sentencias Rightbracket 
            {
              Object RESULT = null;
		 parser.s.FinFun(); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Funciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Funciones ::= Tipo LiteralPar Lista_parametros Rightpar Leftbracket Variables Lista_sentencias BrackTip Funciones_dos 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*Funciones*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipId ::= INT ID 
            {
              Object RESULT = null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(tip);int x = parser.InsTabla(id); parser.s.Dec_Var(x,parser.GetTabla(x),parser.GetTabla(x-1));  
              CUP$parser$result = new java_cup.runtime.Symbol(1/*TipId*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Variables ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*Variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Variables ::= TipId Lista_var Semicolon Variables 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*Variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Variables ::= TipId Lista_var Assign Literal Semicolon Variables 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*Variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Read_tok ::= READ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*Read_tok*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Write_tok ::= WRITE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*Write_tok*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Noteq ::= NOTEQUAL 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Noteq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Eq ::= EQUALS 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Eq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lesseq ::= LESSEQUAL 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Lesseq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Greatereq ::= GREATEREQUAL 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Greatereq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Less ::= LESS 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Less*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Greater ::= GREATER 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Greater*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Not ::= NOT 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Not*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Or ::= OR 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Or*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // And ::= AND 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(op); parser.s.Par(op); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*And*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Else ::= ELSE 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.s.StartElse(parser.InsTabla(ele),ele);  
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Else*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Coma ::= COMMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*Coma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Lista_id ::= Literal_id 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Lista_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Lista_id ::= Literal_id Coma Lista_id 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Lista_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Literal_id ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 int x = parser.InsTabla(id); parser.s.Var(x,id); if (parser.flagop == true){parser.s.eval_binary(parser.GetTabla(x-2),parser.GetTabla(x-1),parser.GetTabla(x));};parser.flagop=false;  
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Literal_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Literal_str ::= LISTSTRING 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*Literal_str*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rightbracket ::= RIGHTBRACKET 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele);  
              CUP$parser$result = new java_cup.runtime.Symbol(35/*Rightbracket*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Leftbracket ::= LEFTBRACKET 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele);  
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Leftbracket*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Rightpar ::= RIGHTPAR 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Rightpar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Leftpar ::= LEFTPAR 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele);
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Leftpar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // True ::= TRUE 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*True*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // False ::= FALSE 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*False*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Assign ::= ASSIGN 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele);
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Ret_tok ::= RETURN 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Ret_tok*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Semicolon ::= SEMICOLON 
            {
              Object RESULT = null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ele = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.InsTabla(ele); parser.s.Par(ele);
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Semicolon*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Literal_num ::= FLOTANTE 
            {
              Object RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 int x = parser.InsTabla(num); parser.s.Cons(x,num); if (parser.flagop == true){parser.s.eval_binary(parser.GetTabla(x-2),parser.GetTabla(x-1),parser.GetTabla(x));};parser.flagop=false;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Literal_num*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Literal_num ::= ENTERO 
            {
              Object RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 int x = parser.InsTabla(num); parser.s.Cons(x,num); if (parser.flagop == true){parser.s.eval_binary(parser.GetTabla(x-2),parser.GetTabla(x-1),parser.GetTabla(x));};parser.flagop=false;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Literal_num*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Literal ::= Err 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*Literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Literal ::= Literal_str 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*Literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Literal ::= Literal_num 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*Literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= 
            {
              Object RESULT = null;
		 System.out.println("Error sintactico en la sentencia"); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Funciones 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Variables Funciones 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*Programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

